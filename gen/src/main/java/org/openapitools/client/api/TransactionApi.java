/*
 * Marketplace ${VERSION_APP}
 * This is a place where sellers and buyers meat each other
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TransactionCreateRequest;
import org.openapitools.client.model.TransactionCreateResponse;
import org.openapitools.client.model.TransactionDeleteRequest;
import org.openapitools.client.model.TransactionDeleteResponse;
import org.openapitools.client.model.TransactionReadRequest;
import org.openapitools.client.model.TransactionReadResponse;
import org.openapitools.client.model.TransactionUpdateRequest;
import org.openapitools.client.model.TransactionUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for transactionCreate
     * @param transactionCreateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionCreateCall(TransactionCreateRequest transactionCreateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionCreateRequest;

        // create path and map variables
        String localVarPath = "/transaction/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionCreateValidateBeforeCall(TransactionCreateRequest transactionCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionCreateRequest' is set
        if (transactionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionCreateRequest' when calling transactionCreate(Async)");
        }
        

        okhttp3.Call localVarCall = transactionCreateCall(transactionCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create transaction
     * 
     * @param transactionCreateRequest Request body (required)
     * @return TransactionCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionCreateResponse transactionCreate(TransactionCreateRequest transactionCreateRequest) throws ApiException {
        ApiResponse<TransactionCreateResponse> localVarResp = transactionCreateWithHttpInfo(transactionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create transaction
     * 
     * @param transactionCreateRequest Request body (required)
     * @return ApiResponse&lt;TransactionCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionCreateResponse> transactionCreateWithHttpInfo(TransactionCreateRequest transactionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionCreateValidateBeforeCall(transactionCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransactionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create transaction (asynchronously)
     * 
     * @param transactionCreateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionCreateAsync(TransactionCreateRequest transactionCreateRequest, final ApiCallback<TransactionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionCreateValidateBeforeCall(transactionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionDelete
     * @param transactionDeleteRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionDeleteCall(TransactionDeleteRequest transactionDeleteRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionDeleteRequest;

        // create path and map variables
        String localVarPath = "/transaction/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionDeleteValidateBeforeCall(TransactionDeleteRequest transactionDeleteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionDeleteRequest' is set
        if (transactionDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionDeleteRequest' when calling transactionDelete(Async)");
        }
        

        okhttp3.Call localVarCall = transactionDeleteCall(transactionDeleteRequest, _callback);
        return localVarCall;

    }

    /**
     * Delete transaction
     * 
     * @param transactionDeleteRequest Request body (required)
     * @return TransactionDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionDeleteResponse transactionDelete(TransactionDeleteRequest transactionDeleteRequest) throws ApiException {
        ApiResponse<TransactionDeleteResponse> localVarResp = transactionDeleteWithHttpInfo(transactionDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Delete transaction
     * 
     * @param transactionDeleteRequest Request body (required)
     * @return ApiResponse&lt;TransactionDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionDeleteResponse> transactionDeleteWithHttpInfo(TransactionDeleteRequest transactionDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionDeleteValidateBeforeCall(transactionDeleteRequest, null);
        Type localVarReturnType = new TypeToken<TransactionDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete transaction (asynchronously)
     * 
     * @param transactionDeleteRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionDeleteAsync(TransactionDeleteRequest transactionDeleteRequest, final ApiCallback<TransactionDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionDeleteValidateBeforeCall(transactionDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionRead
     * @param transactionReadRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionReadCall(TransactionReadRequest transactionReadRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionReadRequest;

        // create path and map variables
        String localVarPath = "/transaction/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionReadValidateBeforeCall(TransactionReadRequest transactionReadRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionReadRequest' is set
        if (transactionReadRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionReadRequest' when calling transactionRead(Async)");
        }
        

        okhttp3.Call localVarCall = transactionReadCall(transactionReadRequest, _callback);
        return localVarCall;

    }

    /**
     * Read transaction
     * 
     * @param transactionReadRequest Request body (required)
     * @return TransactionReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionReadResponse transactionRead(TransactionReadRequest transactionReadRequest) throws ApiException {
        ApiResponse<TransactionReadResponse> localVarResp = transactionReadWithHttpInfo(transactionReadRequest);
        return localVarResp.getData();
    }

    /**
     * Read transaction
     * 
     * @param transactionReadRequest Request body (required)
     * @return ApiResponse&lt;TransactionReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionReadResponse> transactionReadWithHttpInfo(TransactionReadRequest transactionReadRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionReadValidateBeforeCall(transactionReadRequest, null);
        Type localVarReturnType = new TypeToken<TransactionReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read transaction (asynchronously)
     * 
     * @param transactionReadRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionReadAsync(TransactionReadRequest transactionReadRequest, final ApiCallback<TransactionReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionReadValidateBeforeCall(transactionReadRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionUpdate
     * @param transactionUpdateRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionUpdateCall(TransactionUpdateRequest transactionUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transactionUpdateRequest;

        // create path and map variables
        String localVarPath = "/transaction/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionUpdateValidateBeforeCall(TransactionUpdateRequest transactionUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionUpdateRequest' is set
        if (transactionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionUpdateRequest' when calling transactionUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = transactionUpdateCall(transactionUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update transaction
     * 
     * @param transactionUpdateRequest Request body (required)
     * @return TransactionUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionUpdateResponse transactionUpdate(TransactionUpdateRequest transactionUpdateRequest) throws ApiException {
        ApiResponse<TransactionUpdateResponse> localVarResp = transactionUpdateWithHttpInfo(transactionUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update transaction
     * 
     * @param transactionUpdateRequest Request body (required)
     * @return ApiResponse&lt;TransactionUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionUpdateResponse> transactionUpdateWithHttpInfo(TransactionUpdateRequest transactionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionUpdateValidateBeforeCall(transactionUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TransactionUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update transaction (asynchronously)
     * 
     * @param transactionUpdateRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionUpdateAsync(TransactionUpdateRequest transactionUpdateRequest, final ApiCallback<TransactionUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionUpdateValidateBeforeCall(transactionUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
